##################################################
#Jonathan Medina
#High Level Programming Languages
#This program takes in a string of characters defined as simple mathematical operations
#And spits out the tokens generated by scanning the string for incorrect characters.

#Take in user input
operation = raw_input('Input your operation here: ')

#Define  functions that write tokens. This is part of creating a case switch
#in python
def wPlus():
	print "PLUS"
	return
def wMinus():
	print "MINUS"
	return
def wDiv():
	print "DIV"
	return
def wMult():
	print "MULT"
	return
def wLparen():
	print "LPAREN"
	return
def wRparen():
	print "RPAREN"
	return
def wDot():
	print "DOT"
	return

#Define a dictionary that activates functions depending on the character that is passed into its reference
#form
options = {"+": wPlus, "-": wMinus, '/': wDiv, '*': wMult, '(': wLparen, ')': wRparen, '.': wDot}



#For each character in the operation
for i in range(0,len(operation)):
	#If the character is a digit, print int(character)
	if operation[i].isdigit():
		print "Int(" + operation[i] + ")"
	#If the character is one of the operations defined in our dictionary, print out
	#the corresponding token
	elif operation[i] != " " and operation[i] in options:
		options[str(operation[i])]()
	#If the character is an empty space, simply skip it
	elif operation[i] == " ":
		continue
	#If none of those cases fit, it is an invalid character and we want to stop the scanner.
	else:
		print "Error, invalid character: " + operation[i]
		break